#lang plai-typed

;;ExprC 
;;S->number  S->symbol  S->S    S->S+ S     S->S*S   S->F  S->ε
; S->( λ(list of symbol) (S))  S->(S S S)
;S→F(a,b,c)   F(x,y,z)→xyz
;S→abc
;Now suppose we have the function capability with the following grammar:
;S→F(ε)     F(x)→x a | x a F(x b)     (ε means empty string)

;;Defines datatype for ExprC
(define-type ExprC
  [numC (n : number)]
  [plusC (lhs : ExprC) (rhs : ExprC)]
  [multC (lhs : ExprC) (rhs : ExprC)]
;;  [ifC (condition : ExprC)(yes : ExprC)(no : ExprC)]
  [appC (fun : symbol)(arg : ExprC)]  ; aplication, with the name of the
                                      ; function and the argument
  [idC (s : symbol)]) ; identifier for the arguments


;;Defines datatype for function definitions
;;function definitions have a name, one argument, and a body
(define-type FunDefC
  [fdC (name : symbol) (arg : symbol) (body : ExprC)])



;; parse s-expression -> ExprC
;; convert a quoted s expression into the equivalent ArithC form
;; examples
;;  '(+ 23 (+ 23 5)))-> (plusC (numC 23)(plusC (numC 23) (numC 5))))
;; (symbol->s-exp 'x))->  (idC 'x))
;; '(if 1 2 3)->(ifC (numC 1) (numC 2) (numC 3)))

(define (parse [s : s-expression]) : ExprC
  (cond
    [(s-exp-number? s) (numC (s-exp->number s))]
    [(s-exp-symbol? s) (idC (s-exp->symbol s))]
    [(s-exp-list? s)
     (let ([sl (s-exp->list s)])
       (cond
        ; [(= (length sl) 4)
        ;  (if (symbol=? 'if (s-exp->symbol (first sl)))
         ;     (ifC (parse (second sl))
          ;             (parse (third sl))
           ;            (parse (fourth sl)))
            ;  (error 'parse "invalid expression as input"))]
         [(= (length sl) 3)
          (case (s-exp->symbol (first sl)) 
                    [(+) (plusC (parse (second sl)) (parse (third sl)))]
                    [(*) (multC (parse (second sl)) (parse (third sl)))])]
         [(= (length sl) 2)
          (appC (s-exp->symbol (first sl)) (parse (second sl)))]
         [else (error 'parse "invalid list input")])
       )]
    [else (error 'parse "invalid input")]))


;; PARSE Test
(test (parse '(+ 3 4)) (plusC (numC 3) (numC 4)))
;;(test (parse '(* 12 7)) (multC (numC 12) (numC 7)) (plusC (numC 23) (plusC (numC 23) (numC 5))))
(parse '(* 12 7)) (multC (numC 12) (numC 7))
(test (parse (symbol->s-exp 'x)) (idC 'x))
(test (parse '(double 13)) (appC 'double (numC 13)))
;(test(parse '(if 1 2 3))(ifC (numC 1) (numC 2) (numC 3)))
(test (parse '(double (+ 2 (+ 1 1))))
(appC 'double (plusC (numC 2) (plusC (numC 1) (numC 1)))))




;; Binding
;this function takes symbol as name and value then binds function
(define-type Binding [bind (name : symbol) (val : number)])

;; alias on enviroment
(define-type-alias Environment (listof Binding))

;; empty environment
(define mt-env empty)

;; extending environment
(define extend-env cons)


;;lookup function takes n as a symbol and environment which includes binding values,
;; then it checks wheter this funciton in environment or not?
;;if there is,it produces value otherwise it gives error
(define (lookup [for : symbol] [env : Environment]) : number
  (cond
    [(empty? env) (error 'lookup "name not found")]
    [else (cond
            [(symbol=? for (bind-name (first env)))
             (bind-val (first env))]
            [else (lookup for (rest env))])]))


;; Interpreter 
;; Purpose : To interpreter given FMP to value
;; Template : 
;(define (interp [expr : FMP] [env : Environment]) : Value
;  (type-case
;    [n ...]
;    [id ...]
;    [lam ...]
;    [ifzero ...]
;    any function
;    ))
(define (interp [expr : ExprC] [env : Environment] [fds : (listof FunDefC)]) : number
  (type-case ExprC expr
    [numC (n) n]
    [idC (n) (lookup n env)]
    [appC (f a) (local ([define fd (get-fundef f fds)])
                  (interp (fdC-body fd)
                          (extend-env (bind (fdC-arg fd)
                                            (interp a env fds))
                                      mt-env)
                          fds))]
    [plusC (l r) (+ (interp l env fds) (interp r env fds))]
    [multC (l r) (* (interp l env fds) (interp r env fds))]))

 ; [ifC (pred t f)
  ;           (if (= 0 (numC (interp pred env)))
   ;             (interp t env   (interp f env)))])
;; substitution of replacing a name in an expr with another expr 
;; what = what we want to replace the name with
;; for = what name we want to perform substitution
;; in = in which expression we want to do it
;; subst : ExprC * symbol * ExprC -> ExprC
(define (subst [what : ExprC] [for : symbol] [in : ExprC]) : ExprC
  (type-case ExprC in
    [numC (n) in]
    [idC (s) (cond
             [(symbol=? s for) what]
             [else in])]
    [appC (f a) (appC f (subst what for a))]
    [plusC (lhs rhs) (plusC (subst what for lhs)
                      (subst what for rhs))]
    [multC (lhs rhs) (multC (subst what for lhs)
                      (subst what for rhs))]))
;;  [ifC (c s n) (error 'sust "error")]))

;; TESTS
(test (subst (numC 10) 'x (plusC (idC 'x) (idC 'x))) (plusC (numC 10) (numC 10)))
(test (subst (numC 2) 'x (multC (idC 'x) (idC 'x))) (multC (numC 2) (numC 2)))


;; get-fundef : symbol * (listof FunDefC) -> FunDefC
;; a recursive helper function to find the representation of a function 
;; definition from the list, given its name
(define (get-fundef [n : symbol] [fds : (listof FunDefC)]) : FunDefC
  (cond
    [(empty? fds) (error 'get-fundef "reference to undefined function")]
    [(cons? fds) (cond
                   [(equal? n (fdC-name (first fds))) (first fds)]
                   [else (get-fundef n (rest fds))])]))


(define myFun(list
  (fdC 'double 'x (plusC (idC 'x) (idC 'x)))
  (fdC 'inc5 'x (multC (idC 'x) (idC 'x)))))



;; TESTS
(test (get-fundef 'double myFun) (fdC 'double 'x (plusC (idC 'x) (idC 'x))))
(test (get-fundef 'inc5 myFun) (fdC 'inc5 'x (multC (idC 'x) (idC 'x))))
 
 
;; interp : ExprC (listof FunDefC) -> number


;; List of function definition
;; myFunc
;; input:
;; output: 
(define myFunc(list
  (fdC 'double 'x (parse '(+ x x)))  
  (fdC 'quadruple 'x (appC 'double (appC 'double (idC 'x)))) 
  (fdC 'const5 '_ (parse (number->s-exp 5))) 
  (fdC 'sqr 'x (parse '(* x x)))
  (fdC 'sub1 'x (parse '(+ x -1)))
  (fdC 'factorial 'x (parse  '(if x 1  (* x (factorial (sub1 x))))))))


;; TEST
;;(myFunc ())